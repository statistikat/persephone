% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_hierarchical.R, R/plot_single.R
\name{plot}
\alias{plot}
\alias{plot.hierarchicalTimeSeries}
\alias{plot.persephoneSingle}
\title{Interactive time series plot for a persephone object}
\usage{
\method{plot}{hierarchicalTimeSeries}(x, main = NULL,
  rangeSelector = TRUE, drawPoints = FALSE, annualComparison = NULL,
  ...)

\method{plot}{persephoneSingle}(x, main = NULL, forecasts = TRUE,
  showOutliers = TRUE, rangeSelector = TRUE, drawPoints = FALSE,
  annualComparison = NULL, ...)
}
\arguments{
\item{x}{an object of class \link{persephone}.}

\item{main}{plot title}

\item{rangeSelector}{logical flag specifying if a range selector should be
included in the plot}

\item{drawPoints}{logical flag indicating if a small dot should be drawn at
each point, in
addition to a line going through the point.}

\item{annualComparison}{integer corresponding to the month or quarter which
should be highlighted in the plot for every year.}

\item{...}{other plotting parameters to affect the plot. Not currently used.}

\item{forecasts}{logical flag indicating if forecasts should be plotted}

\item{showOutliers}{logical flag specifying if outliers should be highlighted
in the plot}
}
\value{
Returns an object of class \code{dygraphs}.
}
\description{
Produces a dygraph (see the
\href{https://rstudio.github.io/dygraphs/}{online documentation} for more detail)
for objects of class \link{persephone}.
In case of \code{persephoneSingle} objects,
the function generates an interactive time series plot
of the original series, the seasonally adjusted (SA) series and the trend as
well as one year forecasts with prediction intervals of the original series.
For \link{hierarchicalTimeSeries} objects, the function plots the original
aggregate series
as well as the directly and indirectly seasonally adjusted aggregate series.
}
\details{
If no run has been performed on the \link{persephone} object,
only the original (aggregate) time series is plotted.
}
\examples{
# Plotting hierarchicalTimeSeries objects

# Monthly data
data(AirPassengers, package = "datasets")
# Generate two persephoneSingle objects, in this case two tramoseatsSingle
# objects
tsAir1 <- per_tramo(AirPassengers, "RSA1")
tsAir2 <- per_tramo(AirPassengers, "RSA1")
# Generate a hierarchicalTimeSeries object
htAir <- per_hts(tsAir1=tsAir1, tsAir1=tsAir1)
# Plot before run of persephone object
plot(htAir, drawPoints = TRUE)
htAir$run()
# Plot after run
plot(htAir, drawPoints=TRUE)

# Quarterly data
data(UKgas, package = "datasets")
tsUKgas1 <- per_tramo(UKgas, "RSA3")
tsUKgas2 <- per_tramo(UKgas, "RSA3")
htUKgas <- per_hts(tsUKgas1=tsUKgas1, tsUKgas2=tsUKgas2)
plot(htUKgas)
htUKgas$run()
plot(htUKgas)

# Plotting persephoneSingle objects

# Monthly data
data(AirPassengers, package = "datasets")
# Generate a persephoneSingle object, in this case an x13Single object
obj <- per_x13(AirPassengers, "RSA1")
# Plot before run of persephoneSingle object
plot(obj, drawPoints = TRUE)
obj$run()
# Plot after run
plot(obj, drawPoints=TRUE)
# Update some parameters of the persephoneSingle object
# (randomly specify some outliers for illustrative purposes only)
obj$updateParams(usrdef.outliersEnabled = TRUE,
                usrdef.outliersType = c("AO","LS","LS"),
                usrdef.outliersDate=c("1950-01-01","1955-04-01",
                                      "1959-10-01"))
# Perform run to make updateParams take effect
obj$run()
plot(obj)

# Quarterly data
data(UKgas, package = "datasets")
obj2 <- per_x13(UKgas, "RSA3")
plot(obj2)
obj2$run()
plot(obj2)

# Generate a persephoneSingle object, in this case a tramoseatsSingle object
obj3 <- per_tramo(UKgas, "RSA3")
plot(obj3)
obj3$run()
plot(obj3)

}
