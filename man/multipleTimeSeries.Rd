% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perBatch.R
\name{multipleTimeSeries}
\alias{multipleTimeSeries}
\title{R6 Class for a batch of time series}
\description{
Combine mutliple objects of persephone objects into a new
persephone object. On the resulting objects seasonal adjustment can
be performed to all elements at once
}
\examples{
\dontrun{
objX13 <- perX13(AirPassengers, "rsa3")

bt <- perBatch(a = objX13, b = objX13)
bt$run()

bt$adjusted

bt$updateParams(easter.enabled = FALSE)

bt$updateParams(component = "a", usrdef.outliersEnabled = TRUE,
                     usrdef.outliersType = c("AO","LS","LS"),
                     usrdef.outliersDate=c("1950-01-01","1955-04-01","1959-10-01"))

bt$fixModel()
}


## ------------------------------------------------
## Method `multipleTimeSeries$run`
## ------------------------------------------------

perX13(AirPassengers)$run()
}
\section{Super class}{
\code{\link[persephone3:persephone]{persephone3::persephone}} -> \code{multipleTimeSeries}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{components}}{the series of the multiple time series}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{adjusted}}{results from the seasonal adjustment}

\item{\code{params}}{of all components}

\item{\code{forecasts}}{get forecasts}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-multipleTimeSeries-new}{\code{multipleTimeSeries$new()}}
\item \href{#method-multipleTimeSeries-run}{\code{multipleTimeSeries$run()}}
\item \href{#method-multipleTimeSeries-print}{\code{multipleTimeSeries$print()}}
\item \href{#method-multipleTimeSeries-setOptions}{\code{multipleTimeSeries$setOptions()}}
\item \href{#method-multipleTimeSeries-iterate}{\code{multipleTimeSeries$iterate()}}
\item \href{#method-multipleTimeSeries-updateParams}{\code{multipleTimeSeries$updateParams()}}
\item \href{#method-multipleTimeSeries-getComponent}{\code{multipleTimeSeries$getComponent()}}
\item \href{#method-multipleTimeSeries-generateQrTable}{\code{multipleTimeSeries$generateQrTable()}}
\item \href{#method-multipleTimeSeries-fixModel}{\code{multipleTimeSeries$fixModel()}}
\item \href{#method-multipleTimeSeries-fixOutlier}{\code{multipleTimeSeries$fixOutlier()}}
\item \href{#method-multipleTimeSeries-clone}{\code{multipleTimeSeries$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="persephone3" data-topic="persephone" data-id="hchart"><a href='../../persephone3/html/persephone.html#method-persephone-hchart'><code>persephone3::persephone$hchart()</code></a></span></li>
<li><span class="pkg-link" data-pkg="persephone3" data-topic="persephone" data-id="plot"><a href='../../persephone3/html/persephone.html#method-persephone-plot'><code>persephone3::persephone$plot()</code></a></span></li>
<li><span class="pkg-link" data-pkg="persephone3" data-topic="persephone" data-id="plotResiduals"><a href='../../persephone3/html/persephone.html#method-persephone-plotResiduals'><code>persephone3::persephone$plotResiduals()</code></a></span></li>
<li><span class="pkg-link" data-pkg="persephone3" data-topic="persephone" data-id="plotSeasIrrCal"><a href='../../persephone3/html/persephone.html#method-persephone-plotSeasIrrCal'><code>persephone3::persephone$plotSeasIrrCal()</code></a></span></li>
<li><span class="pkg-link" data-pkg="persephone3" data-topic="persephone" data-id="plotSiRatios"><a href='../../persephone3/html/persephone.html#method-persephone-plotSiRatios'><code>persephone3::persephone$plotSiRatios()</code></a></span></li>
<li><span class="pkg-link" data-pkg="persephone3" data-topic="persephone" data-id="plotSpectrum"><a href='../../persephone3/html/persephone.html#method-persephone-plotSpectrum'><code>persephone3::persephone$plotSpectrum()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-new"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-new}{}}}
\subsection{Method \code{new()}}{
create a new multiple time series object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$new(..., list = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{one or more objects which are either of class persephone or
can be coerced to persephone objects with asPersephone. If more than
one element is supplied, the underlying time series must have the same
time instances. All elements supplied in ... must be named.}

\item{\code{list}}{a list of persephone objects as alternative input to \code{...}.
This argument can also handle mts objects}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-run"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-run}{}}}
\subsection{Method \code{run()}}{
run the model
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$run(verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{FALSE} (the default), the results of the run will
be returned invisibly}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{perX13(AirPassengers)$run()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-print"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-print}{}}}
\subsection{Method \code{print()}}{
print mutliple timeseries to screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-setOptions"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-setOptions}{}}}
\subsection{Method \code{setOptions()}}{
sets options for all entries of the dependency tree
recursively (if recursive = TRUE). See
vignette("persephone-hierarchical") for more details.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$setOptions(userdefined = NA, spec = NA, component = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userdefined}}{additional outputs to generate while running. See
\code{\link[=x13_fast]{x13_fast()}} and \code{\link[=tramoseats_fast]{tramoseats_fast()}}.}

\item{\code{spec}}{specifications generated by \code{x13_spec()} or
\code{tramoseats_spec()}}

\item{\code{component}}{which component to modify.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-iterate"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-iterate}{}}}
\subsection{Method \code{iterate()}}{
iterate over all components
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$iterate(
  fun,
  asTable = FALSE,
  component = "",
  unnest = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{a function that takes a persephone object as a parameter}

\item{\code{asTable}}{if true, the return value of this method will be coerced
to a data.frame}

\item{\code{component}}{the id of the component}

\item{\code{unnest}}{if \code{asTable = FALSE}, converts the return value from a
nested list into a flat list}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
this functin is similar to \code{lapply()} in the sense that it
can be used to apply a function to several persephone objects
simultaniusely
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-updateParams"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-updateParams}{}}}
\subsection{Method \code{updateParams()}}{
change all or some parameters of components
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$updateParams(component = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{character vector with names of the components
for which the parameters should be changed. If NULL (default) the
parameters of all components will be changed}

\item{\code{...}}{named arguments to be changed}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
this functions provides the possibility to update
parameters of one or more persephone single objects
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-getComponent"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-getComponent}{}}}
\subsection{Method \code{getComponent()}}{
extract a component series
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$getComponent(componentId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{componentId}}{the id of a component}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-generateQrTable"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-generateQrTable}{}}}
\subsection{Method \code{generateQrTable()}}{
Generate a table for the eurostat quality report
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$generateQrTable(component = "", ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{(optional) a sub-component to create the report for}

\item{\code{...}}{additional arguments for the generate qr table function}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-fixModel"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-fixModel}{}}}
\subsection{Method \code{fixModel()}}{
fix the arima model(s)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$fixModel(component = NULL, verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{character vector with names of the components
for which the parameters should be changed. If NULL (default) the
parameters of all components will be changed}

\item{\code{verbose}}{if TRUE the changed parameters will be reported}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-fixOutlier"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-fixOutlier}{}}}
\subsection{Method \code{fixOutlier()}}{
fix the automatically detected outliers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$fixOutlier(component = NULL, timespan = 12, verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{character vector with names of the components
for which the parameters should be changed. If NULL (default) the
parameters of all components will be changed}

\item{\code{timespan}}{number of months from the end of the time series
where outliers are not fixed}

\item{\code{verbose}}{if TRUE the changed parameters will be reported}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-multipleTimeSeries-clone"></a>}}
\if{latex}{\out{\hypertarget{method-multipleTimeSeries-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{multipleTimeSeries$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
