% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perHts.R
\name{hierarchicalTimeSeries}
\alias{hierarchicalTimeSeries}
\title{R6 Class for hierarchical time series}
\description{
Combine mutliple objects of persephone objects into a new
hierachical persephone object. On the resulting time series the user can perform direct and
indirect seasonal adjustments.
}
\examples{
\dontrun{
objX13 <- perX13(AirPassengers, "RSA3")

ht <- perHts(a = objX13, b = objX13, method = "x13", spec = "RSA1")

ht$updateParams(easter.enabled = TRUE)

ht$updateParams(component = "a", usrdef.outliersEnabled = TRUE,
                     usrdef.outliersType = c("AO","LS","LS"),
                     usrdef.outliersDate=c("1950-01-01","1955-04-01","1959-10-01"))
ht$run()
ht$adjustedDirect
ht$adjustedIndirect

ht2 <- perHts(a = ht, b = objX13)
ht2$run()
ht2$adjustedDirect
ht2$adjustedIndirect
}

## ------------------------------------------------
## Method `hierarchicalTimeSeries$run`
## ------------------------------------------------

perX13(AirPassengers)$run()
}
\section{Super classes}{
\code{\link[persephone:persephone]{persephone::persephone}} -> \code{\link[persephone:multipleTimeSeries]{persephone::multipleTimeSeries}} -> \code{hierarchicalTimeSeries}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{components}}{the sub series of the hierarchical time series}

\item{\code{weights}}{the weights used for aggregating components}

\item{\code{indirect}}{wether to use direct or indirect adjustement}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{params}}{of all components and the aggregated series}

\item{\code{paramsDirect}}{params of the aggregated series}

\item{\code{adjustedIndirect}}{results from the indirect adjustment where
all components are adjusted and then aggregated}

\item{\code{adjusted}}{results from the seasonal adjustment}

\item{\code{forecasts}}{get forecasts}

\item{\code{forecastsIndirect}}{get forecasts according to indirect adjustments}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{hierarchicalTimeSeries$new()}}
\item \href{#method-run}{\code{hierarchicalTimeSeries$run()}}
\item \href{#method-print}{\code{hierarchicalTimeSeries$print()}}
\item \href{#method-setOptions}{\code{hierarchicalTimeSeries$setOptions()}}
\item \href{#method-iterate}{\code{hierarchicalTimeSeries$iterate()}}
\item \href{#method-getComponent}{\code{hierarchicalTimeSeries$getComponent()}}
\item \href{#method-updateParams}{\code{hierarchicalTimeSeries$updateParams()}}
\item \href{#method-fixModel}{\code{hierarchicalTimeSeries$fixModel()}}
\item \href{#method-fixOutlier}{\code{hierarchicalTimeSeries$fixOutlier()}}
\item \href{#method-generateQrTable}{\code{hierarchicalTimeSeries$generateQrTable()}}
\item \href{#method-clone}{\code{hierarchicalTimeSeries$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="persephone" data-topic="persephone" data-id="plot">}\href{../../persephone/html/persephone.html#method-plot}{\code{persephone::persephone$plot()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="persephone" data-topic="persephone" data-id="plotResiduals">}\href{../../persephone/html/persephone.html#method-plotResiduals}{\code{persephone::persephone$plotResiduals()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="persephone" data-topic="persephone" data-id="plotSeasIrrCal">}\href{../../persephone/html/persephone.html#method-plotSeasIrrCal}{\code{persephone::persephone$plotSeasIrrCal()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
create a new hierarchical time series
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$new(
  ...,
  method = c("tramoseats", "x13"),
  userdefined = NULL,
  spec = NULL,
  list = NULL,
  weights = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{one or more objects which are either of class persephone or
can be coerced to persephone objects with asPersephone. If more than
one element is supplied, the underlying time series must have the same
time instances. All elements supplied in ... must be named.}

\item{\code{method}}{specifies the method to be used for the direct adjustment
of the aggregate series. tramoseats or x13}

\item{\code{userdefined}}{passed as the userdefined argument to tramoseats() or
x13()}

\item{\code{spec}}{a model specification returned by x13_spec() or
tramoseats_spec()}

\item{\code{list}}{a list of persephone objects as alternative input to \code{...}.
This argument can also handle mts objects}

\item{\code{weights}}{either a vector if the same weight is used for all time
points or a list of ts objects or a mts object if the weight varies
for different time points. They must have the same length as the
number of components.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
run the model
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$run(verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{if \code{FALSE} (the default), the results of the run will
be returned invisibly}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{perX13(AirPassengers)$run()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
print a hierarchical timeseries to screen
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setOptions"></a>}}
\if{latex}{\out{\hypertarget{method-setOptions}{}}}
\subsection{Method \code{setOptions()}}{
sets options for all entries of the dependency tree
recursively (if recursive = TRUE). See
vignette("persephone-hierarchical") for more details.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$setOptions(
  userdefined = NA,
  spec = NA,
  recursive = TRUE,
  component = ""
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userdefined}}{additional outputs to generate while running. See
\code{\link[=x13]{x13()}} and \code{\link[=tramoseats]{tramoseats()}}.}

\item{\code{spec}}{specifications generated by \code{x13_spec()} or
\code{tramoseats_spec()}}

\item{\code{recursive}}{apply this setting to all subseries as well?}

\item{\code{component}}{which component to modify.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-iterate"></a>}}
\if{latex}{\out{\hypertarget{method-iterate}{}}}
\subsection{Method \code{iterate()}}{
iterate over all components
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$iterate(
  fun,
  asTable = FALSE,
  component = "",
  unnest = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{a function that takes a persephone object as a parameter}

\item{\code{asTable}}{if true, the return value of this method will be coerced
to a data.frame}

\item{\code{component}}{the id of the component}

\item{\code{unnest}}{if \code{asTable = FALSE}, converts the return value from a
nested list into a flat list}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
this functin is similar to \code{lapply()} in the sense that it
can be used to apply a function to several persephone objects
simultaniusely
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getComponent"></a>}}
\if{latex}{\out{\hypertarget{method-getComponent}{}}}
\subsection{Method \code{getComponent()}}{
extract a component series
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$getComponent(componentId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{componentId}}{the id of a component}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-updateParams"></a>}}
\if{latex}{\out{\hypertarget{method-updateParams}{}}}
\subsection{Method \code{updateParams()}}{
change all or some parameters of components
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$updateParams(component = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{character vector with names of the components
for which the parameters should be changed. If NULL (default) the
parameters of all components will be changed}

\item{\code{...}}{named arguments to be changed}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
this functions provides the possibility to update
parameters of one or more persephone single objects
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fixModel"></a>}}
\if{latex}{\out{\hypertarget{method-fixModel}{}}}
\subsection{Method \code{fixModel()}}{
fix the arima model(s)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$fixModel(component = NULL, verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{character vector with names of the components
for which the parameters should be changed. If NULL (default) the
parameters of all components will be changed}

\item{\code{verbose}}{if TRUE the changed parameters will be reported}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fixOutlier"></a>}}
\if{latex}{\out{\hypertarget{method-fixOutlier}{}}}
\subsection{Method \code{fixOutlier()}}{
fix the automatically detected outliers and the
span to find new automatically detected outliers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$fixOutlier(
  component = NULL,
  timespan = 12,
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{character vector with names of the components
for which the parameters should be changed. If NULL (default) the
parameters of all components will be changed}

\item{\code{timespan}}{number of months from the end of the time series
where outliers are not fixed}

\item{\code{verbose}}{if TRUE the changed parameters will be reported}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generateQrTable"></a>}}
\if{latex}{\out{\hypertarget{method-generateQrTable}{}}}
\subsection{Method \code{generateQrTable()}}{
Generate a table for the eurostat quality report
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$generateQrTable(component = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{component}}{(optional) a sub-component to create the report for}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{hierarchicalTimeSeries$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
